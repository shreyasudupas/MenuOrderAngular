import { HttpClient } from '@angular/common/http';
import { Component, Input, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { Apollo } from 'apollo-angular';
import { MessageService } from 'primeng/api';
import { RegistrationProgress, Vendor } from 'src/app/admin/components/vendor/vendor';
import { validateCoordinates } from 'src/app/common/customFromValidators/validateCoorodinates';
import { AddUserClaimVariables, AddUserClaimResponse, UserClaimModel, ADD_USERCLAIM } from 'src/app/common/graphQl/mutations/addUserClaimMutation';
import { AuthService } from 'src/app/common/services/auth.service';
import { LocationService } from 'src/app/common/services/location.service';
import { VendorService } from 'src/app/common/services/vendor.service';
import { environment } from 'src/environments/environment';

@Component({
    selector: 'vendor-pre-registration',
    templateUrl: './vendor-pre-registration.component.html',
    styleUrls: ['./vendor-pre-registration.component.scss'],
    providers: [ MessageService ]
})

export class VendorPreRegistrationComponent implements OnInit {
    vendorId:string;
    vendorTypeOptions:any[];
    latitude:number;
    longitude:number;
    vendorProgress:string;
    
    vendorPreRegistrationForm:FormGroup;

    constructor(private http:HttpClient,
        private fb:FormBuilder,
        private locationService:LocationService,
        private activatedRoute:ActivatedRoute,
        private vendorService:VendorService,
        private apollo:Apollo,
        private authService:AuthService,
        private messageService: MessageService) {}

    ngOnInit(): void {

        this.vendorId = this.activatedRoute.snapshot.params['vendorId'];

        this.vendorPreRegistrationForm = this.fb.group({
            id:[''],
            vendorName: ['',Validators.required],
            vendorDescription: ['',Validators.required],
            vendorType: ['',Validators.required],
            latitude:['0',[Validators.required,validateCoordinates()]],
            longitude:['0',[Validators.required,validateCoordinates()]],
            addressLine1:['',Validators.required],
            state:[{ value:'',disabled:true},Validators.required],
            city: [{ value:'',disabled:true},Validators.required],
            area: [{ value:'',disabled:true},Validators.required],
            openTime: [new Date()],
            closeTime: [new Date()],
        });

        this.vendorTypeOptions = [
            { label:'Online' , value: 'Online' },
            { label:'Offline' , value: 'Offline' },
            { label:'Online & Offline' , value: 'Online & Offline' }
        ];

        if(this.vendorId === '0') {
            this.updateVendorCoordinates();
        } else {
            this.getVendorDetailsById(this.vendorId);
        }
    }

    getLatLongFromUserSelection(latLong:any) {
        this.vendorPreRegistrationForm.patchValue({
            latitude: latLong.latitude,
            longitude: latLong.longitude
        });
    }

    updateVendorCoordinates() {
        this.locationService.getLocationFromUserBrowser();

        //then subscribe to the event once user location is updated
        this.locationService.getUserLocationUpdate().subscribe({
            next: result => {

                if(result !== undefined){
                    this.latitude = result.latitude;
                    this.longitude = result.longitude;
                }

            },
            error: err => {
                console.log('Update Vendor Coorindates has encountred an error ',err);
            }
        })
    }

    async getAutoGeneratedAddress() {
        if(this.vendorPreRegistrationForm.controls['latitude'].errors === null && this.vendorPreRegistrationForm.controls['longitude'].errors === null){
            const lat = this.vendorPreRegistrationForm.controls['latitude'].value;
            const long = this.vendorPreRegistrationForm.controls['longitude'].value;

            if(lat !== '0' && long !== '0'){
                var result = await this.locationService.searchUserLocationByCoordinates(lat,long);

                if(result.error !== undefined){
                    alert('Auto Generated address have recieved incorrect lattitude and longtitude');
                } else {

                    //update cities,state and area dropdown
                    this.updateStateAssociations(result.address.state,result.address.city,result.address.suburb);

                    this.vendorPreRegistrationForm.patchValue({
                        addressLine1: result.display_name,
                        state: result.address.state,
                        city: result.address.city,
                        area: result.address.suburb
                    });
                }
            }
        }
    }

    updateStateAssociations(stateName:string,cityName:string,areaName:string) {
        let url = environment.auth.idpAuthority + '/api/utility/addressAssociations';
        let body = {
            state: stateName,
            city: cityName,
            area: areaName
        };
        
        this.http.post(url,body).subscribe({
            next: result => {
                console.log('Address association update complete');
            },
            error: err => {
                console.log('Address Association encountered error ',err);
            }
        });
    }

    saveSubmit() {
        if(this.vendorPreRegistrationForm.valid) {
            if(this.vendorPreRegistrationForm.controls['state'].value === '' 
            || this.vendorPreRegistrationForm.controls['state'].value === undefined 
            || this.vendorPreRegistrationForm.controls['city'].value === ''
            || this.vendorPreRegistrationForm.controls['city'].value === undefined
            || this.vendorPreRegistrationForm.controls['area'].value === ''
            || this.vendorPreRegistrationForm.controls['area'].value === undefined) {
                alert('Enter Address fields');
                this.vendorPreRegistrationForm.controls['state'].enable();
                this.vendorPreRegistrationForm.controls['city'].enable();
                this.vendorPreRegistrationForm.controls['area'].enable();
                return;
            } else {
                this.vendorPreRegistrationForm.controls['state'].enable();
                this.vendorPreRegistrationForm.controls['city'].enable();
                this.vendorPreRegistrationForm.controls['area'].enable();
                
                var formValue = this.vendorPreRegistrationForm.value;

                var vendor:Vendor = {
                    id:'',
                    vendorName: formValue.vendorName,
                    vendorDescription: formValue.vendorDescription,
                    vendorType: formValue.vendorType.value,
                    state: formValue.state,
                    city: formValue.city,
                    area: formValue.area,
                    addressLine1: formValue.addressLine1,
                    addressLine2: '',
                    openTime: formValue.openTime.toTimeString().split(' ')[0],
                    closeTime: formValue.closeTime.toTimeString().split(' ')[0],
                    active: false,
                    categories:[],
                    coordinates: {
                        latitude: formValue.latitude,
                        longitude: formValue.longitude,
                    },
                    cuisineType:[],
                    image: {
                        imageFileName:'',
                        imageId:''
                    },
                    rating:0,
                    registrationProcess: RegistrationProgress[RegistrationProgress.Filled]
                };

                this.vendorPreRegistrationForm.controls['state'].disable();
                this.vendorPreRegistrationForm.controls['city'].disable();
                this.vendorPreRegistrationForm.controls['area'].disable();

                this.addVendorDetail(vendor);
            }

        } else {
            alert('Enter required fields');
        }
    }

    addVendorDetail(vendor:Vendor) {
        this.vendorService.addVendor(vendor).subscribe({
            next: result => {
                if(result === null) {
                    //alert('Unable to save the vendor data');
                    this.showErrorStatus('Add','Unable to save the vendor data');
                } else {
                    window.history.replaceState({}, '', `vendor/vendor-pre-registration/${result.id}`);

                    this.vendorPreRegistrationForm.patchValue({
                        id: result.id
                    });

                    this.vendorId = result.id;

                    let user = this.authService.getUserInformation();

                    let clainBody:UserClaimModel = {
                        claimType: 'vendorId',
                        claimValue: result.id,
                        userId: user.profile['userId']
                    };
                    this.addVendorIdToClaim(clainBody);
                }
            },
            error: error => {
                console.log('Error occured in Adding the Vendor',error)
                this.showErrorStatus('Add','Add Vendor encountered problem in server');
            }
        });
    }

    editVendorDetail(vendor:Vendor) {
        this.vendorService.editVendor(vendor).subscribe({
            next: result => {
                if(result === null) {
                    alert('Unable to save the edit vendor data');
                }
            },
            error: error => console.log('Error occured in Edit Vendor',error)
        });
    }

    addVendorIdToClaim(userClaim:UserClaimModel) {
        this.apollo.mutate<AddUserClaimResponse,AddUserClaimVariables>({
            mutation: ADD_USERCLAIM,
            variables: {
                userClaim: {
                    userId: userClaim.userId,
                    claimType: userClaim.claimType,
                    claimValue: userClaim.claimValue
                }
            }
        }).subscribe({
            next: result => {
                if(result != null) {
                    console.log('VendorId added in claim')
                } else {
                    console.log('Error occured in adding claim please check the API');
                }
            },
            error: err => console.log('Error occured in Adding Vendor Claim ',err)
        });
    }

    getVendorDetailsById(vendorId:string) {
        this.vendorService.getVendorById(vendorId).subscribe({
            next: result => {
                if(result !== null) {

                    if(result.registrationProcess === RegistrationProgress[RegistrationProgress.Completed]) {

                    }
                    this.vendorPreRegistrationForm.controls['state'].enable();
                    this.vendorPreRegistrationForm.controls['city'].enable();
                    this.vendorPreRegistrationForm.controls['area'].enable();

                    this.vendorPreRegistrationForm.patchValue({
                        id: result.id,
                        vendorName: result.vendorName,
                        vendorDescription: result.vendorDescription,
                        vendorType: result.vendorType,
                        latitude:result.coordinates.latitude,
                        longitude:result.coordinates.longitude,
                        addressLine1:result.addressLine1,
                        state:result.state,
                        city: result.city,
                        area: result.area,
                        openTime: new Date(result.openTime),
                        closeTime: new Date(result.closeTime)
                    });

                    this.vendorPreRegistrationForm.controls['state'].disable();
                    this.vendorPreRegistrationForm.controls['city'].disable();
                    this.vendorPreRegistrationForm.controls['area'].disable();

                    this.latitude = result.coordinates.latitude;
                    this.longitude = result.coordinates.longitude;

                    this.vendorProgress = result.registrationProcess;
                }
            },
            error: err  => console.log('Get VendorDetails By Id',err)
        });
    }

    update() {
        if(this.vendorPreRegistrationForm.valid) {
            this.vendorPreRegistrationForm.controls['state'].enable();
            this.vendorPreRegistrationForm.controls['city'].enable();
            this.vendorPreRegistrationForm.controls['area'].enable();

            var formValue = this.vendorPreRegistrationForm.value;

            var vendor:Vendor = {
                    id:formValue.id,
                    vendorName: formValue.vendorName,
                    vendorDescription: formValue.vendorDescription,
                    vendorType: formValue.vendorType,
                    state: formValue.state,
                    city: formValue.city,
                    area: formValue.area,
                    addressLine1: formValue.addressLine1,
                    addressLine2: '',
                    openTime: formValue.openTime.toTimeString().split(' ')[0],
                    closeTime: formValue.closeTime.toTimeString().split(' ')[0],
                    active: false,
                    categories:[],
                    coordinates: {
                        latitude: formValue.latitude,
                        longitude: formValue.longitude,
                    },
                    cuisineType:[],
                    image: {
                        imageFileName:'',
                        imageId:''
                    },
                    rating:0,
                    registrationProcess: formValue.registrationProcess
            };

            this.vendorService.editVendor(vendor).subscribe({
                next: result => {
                    if(result !== null) {
                        this.showSuccessStatus('Edit','Vendor Edited Successfully');
                    } else {
                        this.showErrorStatus('Edit','Vendor Edit Unsuccess');
                    }
                },
                error: err => {
                    console.log('Error occured in Edit Vendor Service ',err)

                    this.showErrorStatus('Edit','Error occured in server');
                }
            });

            this.vendorPreRegistrationForm.controls['state'].disable();
            this.vendorPreRegistrationForm.controls['city'].disable();
            this.vendorPreRegistrationForm.controls['area'].disable();

        } else {
            //alert('Enter Required fields');
            this.showErrorStatus('Edit','Enter Required fields');
        }
    }

    getVendorStatus(status) {
        if(status === RegistrationProgress[RegistrationProgress.Filled]){
            return 'info'
        } else if(status === RegistrationProgress[RegistrationProgress.InProgress]) {
            return 'warning'
        } else if(status === RegistrationProgress[RegistrationProgress.PartiallyCompleted]) {
            return 'danger'
        } else {
            return 'success'
        }
    }

    showSuccessStatus(title:string,message:string) {
        this.messageService.add({ severity: 'info' , summary:title,detail:message});
    }

    showErrorStatus(title:string,message:string) {
        this.messageService.add({ severity: 'error' , summary:title,detail:message});
    }
    
}